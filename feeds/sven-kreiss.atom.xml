<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sven Kreiss</title><link href="http://www.svenkreiss.com/" rel="alternate"></link><link href="http://www.svenkreiss.com/feeds/sven-kreiss.atom.xml" rel="self"></link><id>http://www.svenkreiss.com/</id><updated>2016-12-31T00:00:00-05:00</updated><entry><title>Decouple</title><link href="http://www.svenkreiss.com/blog/decouple/" rel="alternate"></link><updated>2016-12-31T00:00:00-05:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2016-12-31:blog/decouple/</id><summary type="html">&lt;h2&gt;Decoupling theoretical uncertainties from measurements of the Higgs boson (&lt;a href="http://journals.aps.org/prd/abstract/10.1103/PhysRevD.91.054032"&gt;Phys Rev D91&lt;/a&gt;, &lt;a href="http://arxiv.org/abs/1401.0080"&gt;arXiv:1401.0080&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;This paper by Kyle Cranmer, David Lopez-Val, Tilman Plehn and me is now published in &lt;a href="http://journals.aps.org/prd/abstract/10.1103/PhysRevD.91.054032"&gt;Phys Rev D91&lt;/a&gt; and also available at &lt;a href="http://arxiv.org/abs/1401.0080"&gt;arXiv:1401.0080&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;nbsp;develop a technique to present Higgs coupling measurements, which decouple the poorly defined theoretical uncertainties associated to inclusive and exclusive cross section predictions. The technique simplifies the combination of multiple measurements and can be used in a more general setting. We illustrate the approach with toy &lt;span class="caps"&gt;LHC&lt;/span&gt; Higgs coupling measurements and a collection of new physics&amp;nbsp;models.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;nbsp;share all the software that was involved. That includes that we published the model files and a Mathematica notebook on &lt;a href="http://figshare.com/articles/Supplementary_Material_for_A_Novel_Approach_to_Higgs_Coupling_Measurements_/888607"&gt;figshare&lt;/a&gt;. We put all the code on &lt;a href="http://github.com/svenkreiss/decouple"&gt;github&lt;/a&gt; which can be used for new models or to reproduce all plots in the paper simply by typing &lt;code&gt;make&lt;/code&gt;. We even have a little &lt;a href="http://github.com/svenkreiss/decoupledDemo"&gt;demo project&lt;/a&gt; that pulls three pre-made decoupled models from a webpage and recouples them and produces two plots of combined benchmark coupling&amp;nbsp;models.&lt;/p&gt;</summary><category term="physics"></category></entry><entry><title>Blog moved to trivial.io</title><link href="http://www.svenkreiss.com/blog/trivial-io/" rel="alternate"></link><updated>2015-05-07T00:00:00-04:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2015-05-07:blog/trivial-io/</id><summary type="html">&lt;p&gt;I&amp;nbsp;will continue blogging at &lt;a href="http://trivial.io"&gt;trivial.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://trivial.io"&gt;&lt;img alt="trivial.io" src="/images/trivial-io.png" title="trivial.io screen" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>PhD Thesis: Higgs Boson Discovery and First Property Measurements using the ATLAS Detector</title><link href="http://www.svenkreiss.com/blog/phd-thesis/" rel="alternate"></link><updated>2014-08-17T00:00:00-04:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-08-17:blog/phd-thesis/</id><summary type="html">&lt;p&gt;Last May, I finished my PhD in Particle Physics. I had a great time studying physics and doing research at some of the best places: the University of Edinburgh, Scotland, for my bachelor&amp;#8217;s and master&amp;#8217;s degrees and New York University for my PhD including a year at &lt;span class="caps"&gt;CERN&lt;/span&gt; in Geneva, Switzerland. I also had great advisors: &lt;a href="http://www.thphys.uni-heidelberg.de/~plehn/"&gt;Tilman Plehn&lt;/a&gt;, &lt;a href="http://www.physics.carleton.ca/people/faculty-members/thomas-gregoire"&gt;Thomas Gregoire&lt;/a&gt; and &lt;a href="http://theoryandpractice.org/"&gt;Kyle Cranmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img width="300" alt="famous Higgs overview plot" title="famous Higgs overview plot" class="img-thumbnail float-right" src="/images/phd_higgs_overview.png"&gt;
For my PhD, I was working on the discovery of the Higgs boson. &lt;span class="caps"&gt;CERN&lt;/span&gt; was an amazing place during that time, with the best particle physicists from all over the world working together. I made substantial contributions to the discovery in the &lt;a href="http://atlas.ch/"&gt;&lt;span class="caps"&gt;ATLAS&lt;/span&gt; collaboration&lt;/a&gt;. I was the first person to combine two search channels and to see the 5σ discovery threshold being breached (&lt;a href="/blog/chasing-the-higgs-nyt/"&gt;blog post on the New York Times article&lt;/a&gt;). I created the plot on the right that was published in the &lt;a href="http://www.sciencedirect.com/science/article/pii/S037026931200857X"&gt;&lt;span class="caps"&gt;ATLAS&lt;/span&gt; discovery paper&lt;/a&gt;, &lt;a href="http://www.sciencemag.org/content/338/6114/1576.full.pdf"&gt;Science&lt;/a&gt; and many other places. I also worked on measuring the Higgs boson mass and the coupling strengths to other particles. A large part of my time was dedicated to statistical modeling and the development of analysis tools, some of which are now part of &lt;a href="http://root.cern.ch"&gt;&lt;span class="caps"&gt;CERN&lt;/span&gt;&amp;#8217;s &lt;span class="caps"&gt;ROOT&lt;/span&gt; data analysis tool&lt;/a&gt; and its statistics extension &lt;a href="https://twiki.cern.ch/twiki/bin/view/RooStats/WebHome"&gt;RooStats&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Download Thesis: &lt;a href="/files/phd_thesis.pdf"&gt;&lt;i class="fa fa-file fa-lg"&gt;&lt;/i&gt; &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
After my PhD, I left academia and soon I will start working for &lt;a href="http://www.trywildcard.com/"&gt;Wildcard&lt;/a&gt; as a Data&amp;nbsp;Scientist.&lt;/p&gt;</summary><category term="physics"></category></entry><entry><title>Databench</title><link href="http://www.svenkreiss.com/blog/databench-initial/" rel="alternate"></link><updated>2014-06-03T00:00:00-04:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-06-03:blog/databench-initial/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Databench is a data analysis tool using &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a href="http://socket.io/"&gt;Socket.&lt;span class="caps"&gt;IO&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://d3js.org/"&gt;d3.js&lt;/a&gt; with optional parallelization with &lt;a href="http://python-rq.org/"&gt;Redis Queue&lt;/a&gt; and visualization with &lt;a href="http://mpld3.github.io/"&gt;mpld3&lt;/a&gt;. Check out the &lt;a href="http://databench-examples-viewer.svenkreiss.com/"&gt;live demos&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://databench-examples-viewer.svenkreiss.com/"&gt;&lt;img alt="/images/mpld3pi_demo.png" src="/images/mpld3pi_demo.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seriously, check out the &lt;a href="http://databench-examples-viewer.svenkreiss.com/"&gt;live demos&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;All&amp;nbsp;source codes are available on&amp;nbsp;GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/svenkreiss/databench"&gt;https://github.com/svenkreiss/databench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenkreiss/databench_examples"&gt;https://github.com/svenkreiss/databench_examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svenkreiss/databench_examples_viewer"&gt;https://github.com/svenkreiss/databench_examples_viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;I&amp;nbsp;like Python for data analysis. However, the frontends for visualization are poor. &lt;code&gt;d3.js&lt;/code&gt; is a great library for JavaScript and the web-browser is a powerful user interface. &lt;code&gt;Databench&lt;/code&gt; makes Python communicate with the web frontend with minimal&amp;nbsp;effort.&lt;/p&gt;
&lt;p&gt;The&amp;nbsp;frontend can be interactive (real-time communication goes both ways between &lt;code&gt;Python&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;/&lt;code&gt;d3.js&lt;/code&gt;) and can contain explanatory text and&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;To&amp;nbsp;run Databench, you need to install it with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;analysisfolder&lt;span class="nv"&gt;$ &lt;/span&gt;pip install git+https://github.com/svenkreiss/databench.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(preferably inside a &lt;code&gt;virtualenv&lt;/code&gt;). Then you create an &lt;code&gt;analyses&lt;/code&gt; folder, run &lt;code&gt;databench&lt;/code&gt; on the command&amp;nbsp;line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;analysisfolder&lt;span class="nv"&gt;$ &lt;/span&gt;databench
Registering analysis simplepi as blueprint in flask.
Registering analysis slowpi as blueprint in flask.
Registering analysis mpld3pi as blueprint in flask.
Registering analysis mpld3PointLabel as blueprint in flask.
Registering analysis mpld3Drag as blueprint in flask.
Connecting socket.io to simplepi.
Connecting socket.io to slowpi.
Connecting socket.io to mpld3pi.
Connecting socket.io to mpld3PointLabel.
Connecting socket.io to mpld3Drag.
--- databench ---
 * Running on http://0.0.0.0:5000/
 * Restarting with reloader
Registering analysis simplepi as blueprint in flask.
Registering analysis slowpi as blueprint in flask.
Registering analysis mpld3pi as blueprint in flask.
Registering analysis mpld3PointLabel as blueprint in flask.
Registering analysis mpld3Drag as blueprint in flask.
Connecting socket.io to simplepi.
Connecting socket.io to slowpi.
Connecting socket.io to mpld3pi.
Connecting socket.io to mpld3PointLabel.
Connecting socket.io to mpld3Drag.
--- databench ---
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&amp;nbsp;point your web-browser to &lt;code&gt;http://localhost:5000/&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Example Analysis: &lt;code&gt;simplepi&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Create a project-folder with this&amp;nbsp;structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;- analyses
    - templates
        - simplepi.html
    - __init__.py
    - simplepi.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On&amp;nbsp;the command line, all that is necessary is to run &lt;code&gt;databench&lt;/code&gt; and the url (usually &lt;code&gt;http://localhost:5000&lt;/code&gt;) will be shown that you can open in a web&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;This is the backend in &lt;code&gt;simplepi.py&lt;/code&gt; &lt;em&gt;(updated June 10, 2014)&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Calculating \\(\\pi\\) the simple way.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;databench&lt;/span&gt;


&lt;span class="n"&gt;simplepi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;databench&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;simplepi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;simplepi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="n"&gt;simplepi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thumbnail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;simplepi.png&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@simplepi.signals.on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;onconnect&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run as soon as a browser connects to this.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;inside&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;draws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;simplepi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;draws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;draws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;inside&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

            &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inside&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;draws&lt;/span&gt;
            &lt;span class="n"&gt;uncertainty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;draws&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;draws&lt;/span&gt;
            &lt;span class="n"&gt;simplepi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;pi-estimate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inside&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;draws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;pi-uncertainty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uncertainty&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;simplepi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The&amp;nbsp;analysis waits for the &lt;code&gt;connect&lt;/code&gt; signal and then starts an analysis. It provides the frontend with live updates through &lt;code&gt;signals.emit()&lt;/code&gt; where some of the &lt;code&gt;emit()&lt;/code&gt; messages are for the &lt;code&gt;log&lt;/code&gt; window and some are &lt;code&gt;status&lt;/code&gt; updates.&lt;/p&gt;
&lt;p&gt;The&amp;nbsp;frontend now has to listen to the signals that are emitted by the backend and act on them. The frontend &lt;code&gt;simplepi.html&lt;/code&gt; is a &lt;code&gt;jinja2&lt;/code&gt; template with math rendered with &lt;a href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; using &lt;code&gt;\( ... \)&lt;/code&gt; for inline math and &lt;code&gt;$$ ... $$&lt;/code&gt; for display math &lt;em&gt;(updated June 10, 2014)&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% extends &amp;quot;base.html&amp;quot; %}


{% block title %}simplepi{% endblock %}


{% block content %}
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
    simplepi
    &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&amp;lt;i&amp;gt;&lt;/span&gt;π = &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pi&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0.0 ± 1.0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This little demo uses two random numbers \(r_1\) and \(r_2\) and
then does a comparison $$r_1^2 + r_2^2 &lt;span class="ni"&gt;&amp;amp;le;&lt;/span&gt; 1.0$$ to figure out whether
the generated point is inside the first quadrant of the unit circle.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;pre&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
{% endblock %}


{% block footerscripts %}
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;databench&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Databench&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;simplepi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;databench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genericElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;databench&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#pi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pi-estimate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; ± &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pi-uncertainty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;nbsp;may want to extend the databench &lt;code&gt;base&lt;/code&gt; template giving you the header and footer and some standard libraries, but you can also write your own. The &lt;code&gt;block content&lt;/code&gt; is the &lt;span class="caps"&gt;HTML&lt;/span&gt; part of the frontend with fields for the results and an explanation about the algorithm. The &lt;code&gt;block footerscripts&lt;/code&gt; provides the frontend logic. It wires the &lt;code&gt;log&lt;/code&gt; signals to the &lt;code&gt;#log&lt;/code&gt; field with &lt;code&gt;databench.genericElements.log($('#log'))&lt;/code&gt;. It also starts listening for &lt;code&gt;status&lt;/code&gt; signals. When a &lt;code&gt;status&lt;/code&gt; signal is received, it executes the callback function where &lt;code&gt;msg&lt;/code&gt; contains a &lt;span class="caps"&gt;JSON&lt;/span&gt; representation of the dictionary that the backend sent when emitting &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And&amp;nbsp;last, to make Databench aware of this analysis, add it to the &lt;code&gt;__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplepi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is all that is necessary to create an analysis in Databench. Now you can run &lt;code&gt;databench&lt;/code&gt; in the project-folder and visit &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt; to run and see the output of the&amp;nbsp;analysis.&lt;/p&gt;
&lt;h1&gt;Plotting with &lt;code&gt;matplotlib&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If&amp;nbsp;you like Python, but are not too familiar with &lt;code&gt;d3.js&lt;/code&gt;, you can use &lt;a href="http://mpld3.github.io/"&gt;mpld3&lt;/a&gt; to embed your python plots on the web. The &lt;code&gt;mpld3&lt;/code&gt; website has a nice gallery of examples that should all work in Databench. Two of them &amp;#8212; one with a standard plugin and one with a custom plugin &amp;#8212; are &lt;code&gt;mpld3PointLabel&lt;/code&gt; and &lt;code&gt;mpld3Drag&lt;/code&gt; which are both included in the &lt;a href="http://databench-examples-viewer.svenkreiss.com/"&gt;live demos&lt;/a&gt; and the &lt;a href="https://github.com/svenkreiss/databench_examples"&gt;databench_examples&lt;/a&gt;&amp;nbsp;repository.&lt;/p&gt;
&lt;h1&gt;Parallelization&lt;/h1&gt;
&lt;p&gt;Examples with parallel processing cannot be included in the &lt;a href="http://databench-examples-viewer.svenkreiss.com/"&gt;live demos&lt;/a&gt; but are included in the &lt;a href="https://github.com/svenkreiss/databench_examples"&gt;databench_examples&lt;/a&gt;&amp;nbsp;repository. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;slowpi&lt;/code&gt; example contains a demo-implementation of using &lt;a href=""&gt;Redis Queue&lt;/a&gt; for parallelization. The parallelization is fully implemented on the analysis-side without Databench knowing about it. Other parallelization techniques like &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; and &lt;a href="http://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; are probably working but are not tested&amp;nbsp;yet.&lt;/p&gt;</summary><category term="Flask"></category><category term="Socket.IO"></category><category term="JavaScript"></category><category term="d3.js"></category><category term="Python"></category><category term="matplotlib"></category><category term="mpld3"></category></entry><entry><title>dvds-js version 0.1.0</title><link href="http://www.svenkreiss.com/blog/dvds-js-v0.1.0/" rel="alternate"></link><updated>2014-04-25T00:00:00-04:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-04-25:blog/dvds-js-v0.1.0/</id><summary type="html">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;script src="http://requirejs.org/docs/release/2.1.2/minified/require.js"&gt;&lt;/script&gt;

&lt;script&gt;
require.config({
    paths: {
        'crypto-js.SHA3': 'http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha3',
        'dvds': 'http://svenkreiss.github.io/dvds-js/lib/dvds-0.1.0/dvds.min',
        'dvds.visualize': 'http://svenkreiss.github.io/dvds-js/lib/dvds-0.1.0/dvds.min',
    },
    shim: {
        'crypto-js.SHA3': {
            exports: 'CryptoJS'
        }
    }
});
&lt;/script&gt;

&lt;blockquote&gt;
&lt;p&gt;Distributed Versioned Data Structures in JavaScript. Like git in js.
Checkout the code on &lt;a href="http://github.com/svenkreiss/dvds-js"&gt;github.com/svenkreiss/dvds-js&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The&amp;nbsp;aim of &lt;code&gt;dvds-js&lt;/code&gt; is to have a container (or repository) for data structures in JavaScript that you can &lt;code&gt;fork()&lt;/code&gt;, serialize and send over the wire, &lt;code&gt;commit()&lt;/code&gt; to and then stream back and &lt;code&gt;merge()&lt;/code&gt; with full conflict resolution. Here, &lt;em&gt;data structures&lt;/em&gt; means anything that can be serialized with &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This post is about the first development release, version&amp;nbsp;0.1.0.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;A&amp;nbsp;repository &lt;code&gt;a&lt;/code&gt; is created holding an array with the two names &lt;code&gt;Paul&lt;/code&gt; and &lt;code&gt;Adam&lt;/code&gt;. Then this repository is forked and the fork is called &lt;code&gt;b&lt;/code&gt;. Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are then modified. To demonstrate streaming capabilities, repository &lt;code&gt;b&lt;/code&gt; is stringified before and after the manipulation. At the end &lt;code&gt;b&lt;/code&gt; is merged into &lt;code&gt;a&lt;/code&gt; and the result is shown&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dvds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dvds.visualize&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;dvds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Adam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// send bString to a different machine and make it a repository again&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bStreamed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dvds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;bStreamed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Karl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;bStreamed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Peter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// convert to a string again to send back&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bStreamedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bStreamed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// meanwhile on a&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Paula&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// receive the modified b repository&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bReceived&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dvds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bStreamedString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bReceived&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// update html output&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#test1Out&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// visualize&lt;/span&gt;
    &lt;span class="nx"&gt;dvds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visualize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test1Graph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dvds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visualize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitGraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#test2Graph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;bReceived&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Live output&lt;/strong&gt;: &lt;span id="test1Out"&gt;?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Edit on &lt;a href="http://jsfiddle.net/3Ruat/11/"&gt;http://jsfiddle.net/3Ruat/11/&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Graph of&amp;nbsp;Commits&lt;/h3&gt;
&lt;p&gt;Repositories are created with commit 0 shown on the left and then develop towards the right with the last commit on the far right. The second graph shows a merge of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; as the last commit. This is a live visualization of the two repositories in the&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;Repository &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;svg height="150" width="600" id="test2Graph"&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;Repository &lt;code&gt;a&lt;/code&gt; merged with &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;svg height="150" width="600" id="test1Graph"&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;special merge algorithms for nested arrays and objects (e.g. arrays inside of objects inside of arrays inside of an&amp;nbsp;object)&lt;/li&gt;
&lt;li&gt;commit hash is built over the commit&amp;#8217;s data, but also over the entire parent-tree which means that the commit id can validate the entire&amp;nbsp;parent-tree&lt;/li&gt;
&lt;li&gt;a&amp;nbsp;repository exposes the &lt;code&gt;data&lt;/code&gt; member that behaves like a normal js variable (e.g. can be used in &lt;code&gt;angular.js&lt;/code&gt; directly)&lt;/li&gt;
&lt;li&gt;visualization (currently only &lt;code&gt;CommitGraph&lt;/code&gt;) is factored into its own submodule &lt;code&gt;visualize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;unit tests run with &lt;code&gt;Jasmine&lt;/code&gt; and &lt;code&gt;Karma&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt; is used to check code style, &lt;code&gt;uglify&lt;/code&gt; is used to build min version and automation is done with &lt;code&gt;grunt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dvds-js&lt;/code&gt; is an &lt;a href="http://requirejs.org/docs/whyamd.html#amd"&gt;&lt;span class="caps"&gt;AMD&lt;/span&gt; library&lt;/a&gt;. You can load it using &lt;code&gt;require-js&lt;/code&gt; in the browser as in the example above. The setup looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://s3.amazonaws.com/flaskApp_static/static/d3/d3.v3.min.js&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://requirejs.org/docs/release/2.1.2/minified/require.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;crypto-js.SHA3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;dvds&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://svenkreiss.github.io/dvds-js/lib/dvds-0.1.0/dvds.min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;dvds.visualize&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://svenkreiss.github.io/dvds-js/lib/dvds-0.1.0/dvds.min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;shim&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;crypto-js.SHA3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CryptoJS&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This includes &lt;code&gt;d3.js&lt;/code&gt; for visualizations and &lt;code&gt;CryptoJS&lt;/code&gt; is needed for calculating unique identifiers for commits.
In &lt;code&gt;node.js&lt;/code&gt;, this setup is not necessary and you would simply use &lt;code&gt;require()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Appendix: Static image of commit&amp;nbsp;graphs&lt;/h2&gt;
&lt;p&gt;&lt;img width="500" alt="Commit graphs of dvds-js example." title="Commit graphs of dvds-js example." src="/images/dvds-js-v010-commitgraphs.png"&gt;&lt;/p&gt;
&lt;script&gt;
require(['dvds', 'dvds.visualize'], function() {

    var a = new dvds.Repository(['Paul', 'Adam']);
    var b = a.fork();
    var bString = JSON.stringify(b);

    // send bString to a different machine and make it a repository again
    var bStreamed = dvds.Repository.parseJSON(JSON.parse(bString));
    bStreamed.data[0] = 'Karl';
    bStreamed.data[1] = 'Peter';
    // convert to a string again to send back
    var bStreamedString = JSON.stringify(bStreamed);

    // meanwhile on a
    a.data[0] = 'Paula';

    // receive the modified b repository
    var bReceived = dvds.Repository.parseJSON(JSON.parse(bStreamedString));
    a.merge(bReceived);

    // update html output
    $("#test1Out").text(JSON.stringify(a.data));

    // visualize
    dvds.visualize.CommitGraph(d3.select('#test1Graph'))(a);
    dvds.visualize.CommitGraph(d3.select('#test2Graph'))(bReceived);
});
&lt;/script&gt;</summary><category term="dvds-js"></category><category term="JavaScript"></category><category term="d3.js"></category><category term="distributed"></category><category term="version control"></category></entry><entry><title>Vimeo liquid tag for Pelican</title><link href="http://www.svenkreiss.com/blog/pelican-vimeo/" rel="alternate"></link><updated>2014-03-07T04:41:00-05:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-03-07:blog/pelican-vimeo/</id><summary type="html">&lt;p&gt;Testing my implementation of the &lt;code&gt;vimeo&lt;/code&gt; tag for &lt;code&gt;liquid_tags&lt;/code&gt;. This is based on the &lt;code&gt;youtube&lt;/code&gt; tag which in turn is based on the &lt;a href="https://gist.github.com/jamieowen/2063748"&gt;jekyll / octopress youtube tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The&amp;nbsp;syntax is the same as for the &lt;code&gt;youtube&lt;/code&gt; tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
{% vimeo id [width height] %}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: The code is now merged into the main pelican-plugins repository on github:
&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;https://github.com/getpelican/pelican-plugins&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Tests with different&amp;nbsp;sizes&lt;/h2&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe src="//player.vimeo.com/video/21789576?title=0&amp;amp;byline=0&amp;amp;portrait=0"
                        width="320" height="180" frameborder="0"
                        webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe src="//player.vimeo.com/video/21789576?title=0&amp;amp;byline=0&amp;amp;portrait=0"
                        width="480" height="270" frameborder="0"
                        webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe src="//player.vimeo.com/video/21789576?title=0&amp;amp;byline=0&amp;amp;portrait=0"
                        width="640" height="360" frameborder="0"
                        webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</summary><category term="web"></category><category term="python"></category></entry><entry><title>morphDemo</title><link href="http://www.svenkreiss.com/blog/morph-demo/" rel="alternate"></link><updated>2014-03-06T10:10:00-05:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-03-06:blog/morph-demo/</id><summary type="html">&lt;p&gt;&lt;img width="350" alt="preview of kd-tree morphing" title="preview of kd-tree morphing" class="img-thumbnail float-right" src="/images/kdtreemorph_preview.png"&gt;
&lt;a href="/files/morphDemo.html"&gt;This&lt;/a&gt; is an interactive demo for a new morphing algorithm with special properties that are motivated from Physics. It uses &lt;span class="caps"&gt;KD&lt;/span&gt; trees and kernel density estimates that are calculated in real time in this demo. All visualization is done using &lt;code&gt;d3.js&lt;/code&gt; and custom code for &lt;span class="caps"&gt;KD&lt;/span&gt; trees and kernel densities in&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;Link: &lt;a href="/files/morphDemo.html"&gt;morphDemo.html&lt;/a&gt;&lt;/p&gt;</summary><category term="physics"></category><category term="d3.js"></category><category term="statistics"></category></entry><entry><title>Chasing the Higgs - New York Times</title><link href="http://www.svenkreiss.com/blog/chasing-the-higgs-nyt/" rel="alternate"></link><updated>2014-03-01T02:00:00-05:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2014-03-01:blog/chasing-the-higgs-nyt/</id><summary type="html">&lt;p&gt;My&amp;nbsp;part of the Higgs discovery story in the New York&amp;nbsp;Times.&lt;/p&gt;
&lt;p&gt;&lt;img width="200" alt="Science Times section front page" title="Science Times section front page" src="/images/nyt_science_front_page.jpeg"&gt;
&lt;img width="350" alt="Chasing the Higgs, my part" title="Chasing the Higgs, my part" src="/images/nyt_science_my_part.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;That &amp;#8220;joyful expletive&amp;#8221; was &amp;#8220;Holly shit&amp;#8221; (not correcting the typo) sent from his phone.&lt;br /&gt;
Read the full story on the &lt;a href="http://www.nytimes.com/2013/03/05/science/chasing-the-higgs-boson-how-2-teams-of-rivals-at-CERN-searched-for-physics-most-elusive-particle.html?view=Opening_the_Box"&gt;New York Times website&lt;/a&gt; from March 5,&amp;nbsp;2013.&lt;/p&gt;</summary><category term="being awesome"></category></entry><entry><title>A Nobel Prize Party: Cheese, Bubbles, and a Boson - The New Yorker</title><link href="http://www.svenkreiss.com/blog/nobel-prize-party-new-yorker/" rel="alternate"></link><updated>2013-10-10T08:00:00-04:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2013-10-10:blog/nobel-prize-party-new-yorker/</id><summary type="html">&lt;p&gt;A&amp;nbsp;funny and only approximately accurate article about how we celebrated the Nobel Prize for Peter Higgs and François Englert at &lt;span class="caps"&gt;NYU&lt;/span&gt; in the New&amp;nbsp;Yorker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sven Kreiss, Cranmer’s graduate student, was the first to see the statistical evidence needed to claim the discovery in, June, 2012. He told me in a strong German accent that they don’t host a lot of parties in the physics lounge. “We are very serious here,” he&amp;nbsp;said.&lt;/p&gt;
&lt;p&gt;Kreiss has a little goatee and was wearing a black T-shirt with an unzipped grey sweatshirt. He remained stoic as he recalled the moment, at &lt;span class="caps"&gt;CERN&lt;/span&gt;, the research center in Geneva, when he saw their research cross the finish line, confirming the particle’s existence. Kreiss was working on &lt;span class="caps"&gt;ATLAS&lt;/span&gt; (A Toroidal &lt;span class="caps"&gt;L.H.C.&lt;/span&gt; Apparatus), one of seven experiments being conducted at the Large Hadron Collider, and was on one of two detector teams going after the Higgs boson. “It’s a graph,” Kreiss said of what he saw at the time. “It has some lines. The line, it goes down like this”—he swooped his hand down—“and if the line goes down far enough, then you say you’ve discovered a new particle.” He&amp;nbsp;shrugged.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;Kreiss didn’t immediately think that the finding was Nobel-worthy. “It was combined with a lot of exhaustion,” he said. “You’re tired, you think about this, you go out and come back in. Actually, I had a good night’s sleep for the first time in a while. And then, in the morning, I came back and e-mailed this to my professor. It was his birthday, so I said, ‘Happy birthday.’ ” That was June 25, 2012. Cranmer can remember how excited he was to receive the note. “I wrote back, ‘Holy shit,’ ” he said. “But I misspelled ‘holy.’ Too many&amp;nbsp;‘L’s.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The&amp;nbsp;full story is here: &lt;a href="http://www.newyorker.com/tech/elements/a-nobel-prize-party-cheese-bubbles-and-a-boson"&gt;http://www.newyorker.com/tech/elements/a-nobel-prize-party-cheese-bubbles-and-a-boson&lt;/a&gt;&lt;/p&gt;</summary><category term="being awesome"></category></entry><entry><title>number4 in Leipziger Volkszeitung</title><link href="http://www.svenkreiss.com/blog/number4-lvz/" rel="alternate"></link><updated>2004-01-01T00:00:00-05:00</updated><author><name>Sven Kreiss</name></author><id>tag:www.svenkreiss.com,2004-01-01:blog/number4-lvz/</id><summary type="html">&lt;h2&gt;Student from Brandis teaches Robot How to&amp;nbsp;Walk&lt;/h2&gt;
&lt;p&gt;Newspaper article about the competition Jugend Forscht. In 2004 this project got me the first place in the regional and state competition. The photo was taken at the national competition in&amp;nbsp;Saarbruecken.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/number4/lvz.jpg" alt="number4 in LVZ" title="number4 in LVZ"&gt;&lt;/p&gt;</summary><category term="being awesome"></category><category term="number4"></category></entry></feed>